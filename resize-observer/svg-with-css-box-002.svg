<svg xmlns="http://www.w3.org/2000/svg" xmlns:h="http://www.w3.org/1999/xhtml" id="root" width="100%" height="100%" version="1.1"><title>ResizeObserver for SVG elements with CSS box.</title><h:script src="/resources/testharness.js"/><h:script src="/resources/testharnessreport.js"/><h:script src="./resources/resizeTestHelper.js"/><foreignObject width="100" height="100" x="0" y="0"><svg xmlns="http://www.w3.org/2000/svg" id="foreign-svg" width="100" height="100" viewBox="0 0 100 100"><circle cx="50" cy="50" r="45" style="fill:orange;stroke:#000;stroke-width:1"/></svg></foreignObject><script>&apos;use strict&apos;; function test0() { let targetWidth = 400; let target = document.getElementById(&apos;root&apos;); let helper = new ResizeTestHelper( &quot;test0: Root SVG resize observed&quot;, [ { setup: observer =&gt; { observer.observe(target); }, notify: (entries, observer) =&gt; { return true; // Delay next step } }, { setup: observer =&gt; { target.setAttribute(&apos;width&apos;, targetWidth); }, notify: (entries, observer) =&gt; { assert_equals(entries.length, 1); const entry = entries[0]; assert_equals(entry.target, target); assert_equals(entry.contentBoxSize[0].inlineSize, targetWidth); } } ]); return helper.start(() =&gt; { target.setAttribute(&apos;width&apos;, &apos;100%&apos;); }); } function test1() { let targetWidth = 90; let target = document.getElementById(&apos;foreign-svg&apos;); let helper = new ResizeTestHelper( &quot;test1: `foreignObject` SVG resize observed&quot;, [ { setup: observer =&gt; { observer.observe(target); }, notify: (entries, observer) =&gt; { return true; // Delay next step } }, { setup: observer =&gt; { target.setAttribute(&apos;width&apos;, targetWidth); }, notify: (entries, observer) =&gt; { assert_equals(entries.length, 1); const entry = entries[0]; assert_equals(entry.target, target); assert_equals(entry.contentBoxSize[0].inlineSize, targetWidth); } } ]); return helper.start(); } let guard; test(_ =&gt; { assert_implements(window.ResizeObserver); guard = async_test(&apos;guard&apos;); }, &quot;ResizeObserver implemented&quot;) test0() .then(() =&gt; { test1(); }) .then(() =&gt; { guard.done(); });</script></svg>