<svg xmlns="http://www.w3.org/2000/svg" xmlns:h="http://www.w3.org/1999/xhtml"><metadata><h:link href="https://www.w3.org/TR/SVG11/styling.html#StyleElement" rel="help"/><h:meta content="SVGStyle objects have the properties specified in their interfaces" name="assert"/></metadata><h:script src="/resources/testharness.js" type="text/javascript"/><h:script src="/resources/testharnessreport.js" type="text/javascript"/><style id="styleElement" disabled="disabled" media="all" title="internal style sheet" type="text/css">@import url(support/a-green.css);*{margin:0;padding:0}</style><script>var styleElement = document.getElementById(&quot;styleElement&quot;); var styleSheet; // styleElement.sheet exists and is a CSSStyleSheet test(function() { assert_idl_attribute(styleElement, &quot;sheet&quot;); assert_readonly(styleElement, &quot;sheet&quot;); styleSheet = styleElement.sheet; assert_true(styleSheet instanceof CSSStyleSheet); }, &quot;sheet_property&quot;); // The sheet property on LinkStyle should always return the current associated style sheet. test(function () { var style = document.createElementNS(&quot;http://www.w3.org/2000/svg&quot;, &quot;style&quot;); document.querySelector(&quot;svg&quot;).appendChild(style); var sheet1 = style.sheet; assert_equals(sheet1.cssRules.length, 0); style.appendChild(document.createTextNode(&quot;a { color: green; }&quot;)); assert_equals(style.sheet.cssRules.length, 1); }, &quot;sheet_property_updates&quot;); // ownerRule, cssRules, insertRule and deleteRule properties exist on CSSStyleSheet // ownerRule, cssRules are read only test(function() { assert_idl_attribute(styleSheet, &quot;ownerRule&quot;); assert_idl_attribute(styleSheet, &quot;cssRules&quot;); assert_inherits(styleSheet, &quot;insertRule&quot;); assert_inherits(styleSheet, &quot;deleteRule&quot;); assert_readonly(styleSheet, &quot;ownerRule&quot;); assert_readonly(styleSheet, &quot;cssRules&quot;); }, &quot;CSSStyleSheet_properties&quot;); var importSheet; // CSSStyleSheet initial property values are correct test(function() { assert_equals(styleSheet.ownerRule, null); assert_true(styleSheet.cssRules.length &gt; 0); assert_true(styleSheet.cssRules.item(0) instanceof CSSImportRule); importSheet = styleSheet.cssRules.item(0).styleSheet; }, &quot;CSSStyleSheet_property_values&quot;); // type, disabled, ownerNode, parentStyleSheet, href, title, and media properties exist on StyleSheet // type, ownerNode, parentStyleSheet, href, and title properties are read only test(function() { assert_idl_attribute(styleSheet, &quot;type&quot;); assert_idl_attribute(styleSheet, &quot;disabled&quot;); assert_idl_attribute(styleSheet, &quot;ownerNode&quot;); assert_idl_attribute(styleSheet, &quot;parentStyleSheet&quot;); assert_idl_attribute(styleSheet, &quot;href&quot;); assert_idl_attribute(styleSheet, &quot;title&quot;); assert_idl_attribute(styleSheet, &quot;media&quot;); assert_readonly(styleSheet, &quot;type&quot;); assert_readonly(styleSheet, &quot;ownerNode&quot;); assert_readonly(styleSheet, &quot;parentStyleSheet&quot;); assert_readonly(styleSheet, &quot;href&quot;); assert_readonly(styleSheet, &quot;title&quot;); }, &quot;StyleSheet_properties&quot;); // StyleSheet initial property values are correct test(function() { assert_equals(styleSheet.type, &quot;text/css&quot;); assert_equals(styleSheet.disabled, false); assert_equals(styleSheet.ownerNode, styleElement); assert_equals(importSheet.ownerNode, null); assert_equals(styleSheet.href, null); assert_regexp_match(importSheet.href, /support\/a-green.css$/); assert_equals(styleSheet.parentStyleSheet, null); assert_equals(importSheet.parentStyleSheet, styleSheet); assert_equals(styleSheet.title, &quot;internal style sheet&quot;); assert_equals(styleSheet.media.item(0), &quot;all&quot;); }, &quot;StyleSheet_property_values&quot;);</script></svg>